{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Pragma\npragma solidity ^0.8.8;\n\n// Imports\nimport './PriceConverter.sol';\n\n// Error Codes\nerror FundMe__NotOwner();\nerror FundMe__DidNotSendMinimumUSD();\nerror FundMe__WithdrawError();\n\n// Interfaces, Libraries, Contracts\n/**\n * @title A contract for crowd funding\n * @author Luis Gerardo\n * @notice This contract is to demo a sample funding contract\n * @dev This implements price feeds as our library\n */\ncontract FundMe {\n  // Type declarations\n  using PriceConverter for uint256;\n\n  // State Variables\n  mapping(address => uint256) private s_addressToAmountFunded;\n  address[] private s_funders;\n  address private immutable i_owner;\n  uint256 public constant MINIMUM_USD = 50 * 1e18;\n  AggregatorV3Interface private s_priceFeed;\n\n  // Events, Modifiers\n  modifier onlyOwner() {\n    if (msg.sender != i_owner) {\n      revert FundMe__NotOwner();\n    }\n    _;\n  }\n\n  //constructor, receive, fallback Functions\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n\n  //Other Functions \n  /**\n   * @notice This function funds this contract\n   * @dev This implements price feeds as our library\n   */\n  function fund() public payable {\n\n    if (msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD) {\n      revert FundMe__DidNotSendMinimumUSD();\n    }\n\n    s_funders.push(msg.sender);\n    s_addressToAmountFunded[msg.sender] += msg.value;\n  }\n\n  function withdraw() public payable onlyOwner {\n    address[] memory funders = s_funders;\n\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n      address funder = funders[funderIndex];\n      s_addressToAmountFunded[funder] = 0;\n    }\n\n    s_funders = new address[](0);\n\n    (bool success, ) = i_owner.call{value: address(this).balance}('');\n    if (!success) {\n      revert FundMe__WithdrawError();\n    }\n  }\n\n\n  //View, Pure Functions\n  function getOwner() public view returns (address) {\n    return i_owner;\n  }\n\n  function getFunders(uint256 index) public view returns (address) {\n    return s_funders[index];\n  }\n\n  function getAddressToAmountFunded(address funder)\n    public\n    view\n    returns (uint256)\n  {\n    return s_addressToAmountFunded[funder];\n  }\n\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\n    return s_priceFeed;\n  }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\n\nlibrary PriceConverter {\n  function getPrice(AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n    return uint256(price * 1e10);\n  }\n\n  function getVersion(AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    return priceFeed.version();\n  }\n\n  function getConversionRate(\n    uint256 _ethAmount,\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * _ethAmount) / 1e18;\n    return ethAmountInUsd;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}